# Git 관리전략

## 개요
- 프로젝트 진행 간 개발팀의 Git Repository 관리의 통일성을 유지하고, 충돌상황 발생 시 규칙 내에서 유연하게 대처하기 위함.

## 규칙

### Branch
- **Master(main)**
  - 정식 버전 빌드용 브랜치
  - 실수 및 무분별한 수정을 막기 위해 엑세스 제한
  - Develop Branch -> Master Branch Merge는 개발 팀장만 접근한다.
- **Develop**
  - 기능 개발/구현용 브랜치
  - 팀원들은 이 브랜치에서 개인의 작업 브랜치를 생성 후, 개별 작업 완료시 이 브랜치로 Merge한다.
    - Merge시 Pull requests를 활용. 충돌 대비와 충돌 발생시의 대처를 모든 팀원이 서포트 할 수 있도록 한다.
  - QA 및 개인 브랜치는 해당 브랜치에서 파생한다.
- **개인 작업 Branch**
  - 생성 브랜치 명 : `Type/작업내용`
    - Type
      - `Feat` : 새로운 기능 추가
      - `Fix` : 기존 기능 및 버그 수정
      - `Test` : 기능 테스트 전용
      - `Set` : 프로젝트 설정 등 유니티 자체의 설정
    - ex> `Feat/CharacterWalkAnimation`
    - ex> `Fix/FlowerObjectBugFix`
    - ex> `Test/ObjectOnPlane`
    - ex> `Set/BuildSetting`
  - 작업 내용이 짧더라도 브랜치 명으로 각자의 작업 진행상황을 공유하기 위해 가급적 정확히 기재한다.
  - 기능 수정 및 구현이 끝나 필요 없어진 브랜치는 팀장 판단 하에 삭제한다.

### Commit
- **Commit 주기**
  - 충돌 및 버그 발생시 Reset을 용이하게 하기 위해 작은 단위로 나눠 커밋한다.
    - ex> 이미지 리소스 추가, 스크립트 생성, 한 단위의 기능 구현 시
  - 커밋 메세지는 아래의 규칙을 따르며, 부가설명이 필요한 경우 Description(설명)란에 기재한다.
- **Commit 메세지**
  - `[Type]: 내용`
    - ex> `[Fix]: Flower 오브젝트 배치시 위치 어긋나는 버그 수정`
  - Type
    - `[Feat]:`새로운 기능 추가, 혹은 그와 관련된 파일 생성(씬, 스크립트, 오브젝트, 프리팹 등)
    - `[fix]:`버그 및 기능의 수정
    - `[Set]:`프로젝트 설정 등 유니티 자체의 설정 변경 (팀장 권한)
    - `[Refactor]:`기능에 영향을 주지 않는 범위의 코드 수정(코드 개선 및 리팩토링 등)
    - `[Test]:`테스트에 관련된 모든 작업
    - `[Docs]:`문서파일 추가 및 수정 (데이터시트 / CSV 등)
    - `[Res]:`에셋 등 프로젝트에 사용되는 리소스 추가 및 수정
  - 타입 종류에 기재되지 않은 단순 작업들은 타입을 기재하지 않는다.
    - ex> `불필요 파일 정리`, `네이밍 컨벤션 보완에 따른 파일명 변경`

### 작업규칙
- 규칙에 맞춰 브랜치 생성
- 작업시 `이름 이니셜_Test_작업명`의 씬을 추가해 해당 씬 안에서만 작업한다.
  - ex> `KJS_Test_CharacterMovement`
- 개인이 작업시 생성하는 `스크립트`/`프리팹` 파일은 추후 수정 및 코드, 기능 추가의 여지가 있을 경우 파일명 앞에 `이니셜_`을 붙인다.
  - ex> `KJS_CharacterMovement`
  - ex> `KJS_FlowerPrefab`
- 자신의 이니셜이 붙지 않은 파일 수정 시 모든 팀원들에게 해당 파일을 수정중이지 않은지 우선적으로 확인한다.
- 프로젝트의 자체 설정 변경과 파일 정리(파일의 삭제, 및 테스트 파일의 메인씬 적용)의 권한은 개발팀장만 가진다.
  - 단, 팀장의 관리 하 삭제, 변경 지시를 받은 경우는 예외로 한다.

### 충돌 대처
- 자신이 작성한 코드와 다른 개발자의 코드 충돌 시
  - 반드시 해당 개발자와 상의 후 불필요 코드 삭제/적용
- 프로젝트 설정 충돌
  - 개발팀장에게 보고를 우선시 한다.
  - 개발팀장 부재시 가급적 모든 팀원이 모여 상의 후 결정한다.

---
## 이해하기 어렵다면
- `Git Flow` 검색해볼 것.

## 작성자
- 김재성

## 최종 수정일자
- 2023.10.18 수요일
